Metadata-Version: 2.4
Name: rbyrct-core
Version: 0.1.0
Summary: CUDA-accelerated RBYRCT (MART) with CPU fallback and Streamlit demo
Author: Syed Hussain Ather
License: MIT
Requires-Python: >=3.10
Description-Content-Type: text/markdown
Requires-Dist: numpy
Requires-Dist: scikit-image
Requires-Dist: streamlit
Requires-Dist: matplotlib
Requires-Dist: pillow
Requires-Dist: pandas
Requires-Dist: pytest
Provides-Extra: gpu
Requires-Dist: cupy-cuda12x>=12.0; extra == "gpu"

# CUDA-Accelerated RBYRCT (MART) for Low-Dose CT

**Open-source GPU reconstruction** using MART with custom CuPy RawKernels.  
Built for the **NVIDIA GTC 2025 Golden Ticket Contest**.  
Includes a live demo (Streamlit) + notebooks + benchmarks.

> ‚ö° **XX√ó faster** than CPU FBP on 512√ó512,  
> üìà **Better PSNR/SSIM** than FBP at **YY% fewer projections**,  
> üß© **Interactive demo**: adjust projections/iterations in real-time.

---

## ‚ú® Why this project?

- **GPU made it possible**: MART is slow on CPU; GPUs deliver real-time interactivity.  
- **Dose reduction story**: High-quality reconstructions at fewer projections = lower radiation exposure.  
- **Distinctive**: Medical imaging + MART/RBYRCT is rare in contest entries (most will be LLM demos).  

---

### üì¶ Installation (Updated)

**Prerequisites**

* Python 3.10‚Äì3.11
* (Optional) NVIDIA GPU with CUDA 12.x for GPU acceleration

---

#### **Option 1: CPU-only (macOS / no GPU)**

Works everywhere (falls back to NumPy/Scikit-Image).

```bash
git clone https://github.com/<your-handle>/rbyrct-gtc-2025.git
cd rbyrct-gtc-2025
pip install -r requirements.txt
```

---

#### **Option 2: GPU (Linux + NVIDIA CUDA 12.x)**

For real speedups using CuPy RawKernels.

```bash
git clone https://github.com/<your-handle>/rbyrct-gtc-2025.git
cd rbyrct-gtc-2025
pip install -r requirements.txt
pip install .[gpu]
```

---

#### **Option 3: Conda (cross-platform)**

```bash
conda create -n rbyrct python=3.11 -y
conda activate rbyrct
pip install -r requirements.txt
# Add GPU extras if on Linux+CUDA:
# pip install .[gpu]
```

---

#### **Option 4: Docker (NGC-ready)**

```bash
docker build -t rbyrct-demo .
docker run --gpus all -p 8501:8501 rbyrct-demo
```

---

## üöÄ Quickstart

Launch the demo:

```bash
streamlit run demo/app.py
```

Run a benchmark:

```bash
python examples/bench.py
```

---

## üìä Results

Benchmarked on **GPU\_NAME** vs **CPU\_NAME** (fill in your hardware here):

| Setting                    | CPU FBP (ms) | GPU MART (ms) | Speedup |
| -------------------------- | -----------: | ------------: | ------: |
| 512√ó512, 180 proj, det=512 |          AAA |           BBB |    CCC√ó |

**Quality comparison (PSNR/SSIM):**

* 180 ‚Üí 120 projections:

  * FBP = XX dB, SSIM = 0.YYY
  * MART = ZZ dB, SSIM = 0.WWW

---

## üñºÔ∏è Screenshots

| Nsight Systems (timeline)                      | Side-by-side recon                       |
| ---------------------------------------------- | ---------------------------------------- |
| ![Nsight timeline](assets/nsight_timeline.png) | ![Side by side](assets/side_by_side.png) |

---

## üß∞ Tech stack

* **CUDA** via CuPy RawKernels
* **Nsight Systems/Compute** profiling
* **Streamlit** interactive demo
* **scikit-image** FBP baseline
* **Docker** for reproducibility (NGC-ready)

---

## üìÇ Repo layout

```
rbyrct-gtc-2025/
‚îú‚îÄ rbyrct_core/        # CuPy kernels + MART loop
‚îú‚îÄ demo/               # Streamlit UI
‚îú‚îÄ examples/           # Benchmarks + notebooks
‚îú‚îÄ assets/             # Screenshots for README/social
‚îú‚îÄ tests/              # Simple smoke tests
‚îî‚îÄ README.md
```

---

## ‚ö° API usage

```python
import cupy as cp
from rbyrct_core.core import forward_project, mart_reconstruct
from rbyrct_core.fbp_baseline import cpu_fbp_baseline

# phantom (N x N)
x = cp.ones((512, 512), dtype=cp.float32)

# forward projection
sino = forward_project(x, n_angles=180, n_det=512)

# MART reconstruction
rec = mart_reconstruct(sino, H=512, W=512, iters=10, beta=1.0)

# CPU baseline
rec_fbp = cpu_fbp_baseline(sino)
```

---

## üìù Citation

If you use this code, please cite:

```
CUDA-Accelerated RBYRCT (MART) for Low-Dose CT
NVIDIA GTC 2025 Golden Ticket Contest
https://github.com/<your-handle>/rbyrct-gtc-2025
```

See `CITATION.cff` for metadata.

---

## üì£ Social post (what I‚Äôll share)

> Open-sourced a **CUDA-accelerated RBYRCT** pipeline for low-dose CT.
> MART + custom kernels give **XX√ó speedup** over CPU and better PSNR/SSIM than FBP at **YY% fewer projections**.
> Notebook + demo inside. Built on CUDA/cuFFT + profiled with Nsight.
> \#NVIDIAGTC @NVIDIAGTC @NVIDIADeveloper

---

## ‚ö†Ô∏è Disclaimer

This code is for **educational/demo purposes only**.
It is *not* a clinical CT reconstruction tool.

